Design HashSet

Design a HashSet without using any built-in hash table libraries.

To be specific, your design should include these functions:

add(value): Insert a value into the HashSet. 
contains(value) : Return whether the value exists in the HashSet or not.
remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.

Example:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // returns true
hashSet.contains(3);    // returns false (not found)
hashSet.add(2);          
hashSet.contains(2);    // returns true
hashSet.remove(2);          
hashSet.contains(2);    // returns false (already removed)

Note:

All values will be in the range of [0, 1000000].
The number of operations will be in the range of [1, 10000].
Please do not use the built-in HashSet library.

class MyHashSet {

//private Boolean isExist = false;
private int[] HS = new int[1000001]; //problem this is if we have 0 in test

/** Initialize your data structure here. */
public MyHashSet() {
    
}

public void add(int key) {
    HS[key] = key;
    
    //for 0
    if (key == 0){
        HS[key] = -1;
    }
    
}

public void remove(int key) {
    HS[key] = -2;
    
}

/** Returns true if this set contains the specified element */
public boolean contains(int key) {
    if(key == 0){
        if(HS[key] == -1){
            return true;
        }
    }
    else{
        if(HS[key] == key){
            return true;
        }
    }

    return false;
 }
}
