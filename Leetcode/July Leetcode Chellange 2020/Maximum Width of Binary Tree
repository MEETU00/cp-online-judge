Maximum Width of Binary Tree

Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
 

Constraints:

The given binary tree will have between 1 and 3000 nodes.

Solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        if(root ==null){
            return 0;
        }
        Deque<TreeNode> dq = new LinkedList<>();
        dq.add(root);
        
        int max = 1;
        while(!dq.isEmpty()){
            while(!dq.isEmpty()&& dq.getFirst()==null) dq.removeFirst();
             while(!dq.isEmpty()&& dq.getLast()==null) dq.removeLast();
            
            max = Math.max(dq.size(),max);
            
            int s = dq.size();
            for(int i =0;i<s;i++){
                TreeNode temp = dq.poll();
                if(temp==null){
                    dq.add(null);
                    dq.add(null);
                } else {
                    dq.add(temp.left);
                    dq.add(temp.right);
                    
                }
            }
            
            
        }
        return max;
        
    }
}
