  Word Break


Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

Solution


class Solution {
	HashMap<Integer, Boolean> hs = new HashMap<>();
	public boolean wordBreak(String s, List<String> wordDict) {
		return traverse(s, wordDict, 0);
	}

	public boolean traverse(String s, List<String> wordDict, int pos){
		int len = s.length();
		StringBuilder sb = new StringBuilder();
		boolean flag = false;

		if(hs.containsKey(pos)) return hs.get(pos);

		for(int i=pos; i<len; i++){
			sb.append(s.charAt(i));
			if(wordDict.contains(sb.toString())) flag |= traverse(s, wordDict, i+1);
		}

		if(sb.toString().length()!=0 && !wordDict.contains(sb.toString()) && !flag){
			hs.put(pos, false);
			return false;
		}
		else{
			hs.put(pos, true);
			return true;
		}
	}
}
